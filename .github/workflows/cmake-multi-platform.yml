# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [macos-latest, ubuntu-latest] # windows-latest does not compile
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          #- os: windows-latest
          #  c_compiler: cl
          #  cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          #- os: windows-latest
          #  c_compiler: gcc
          #- os: windows-latest
          #  c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install PyTorch - Linux
      if: matrix.os == 'ubuntu-latest'
      run: >
        wget https://download.pytorch.org/libtorch/cpu/libtorch-cxx11-abi-shared-with-deps-2.5.1%2Bcpu.zip -O libtorch.zip &&
        unzip libtorch.zip -d $HOME &&
        rm -f libtorch.zip

    - name: Install PyTorch - MacOS
      if: matrix.os == 'macos-latest'
      run: >
        wget https://download.pytorch.org/libtorch/cpu/libtorch-macos-arm64-2.5.1.zip -O libtorch.zip &&
        unzip libtorch.zip -d $HOME &&
        rm -f libtorch.zip

    - name: Install PyTorch - Windows
      if: matrix.os == 'windows-latest'
      run: >
        Invoke-WebRequest -Uri "https://download.pytorch.org/libtorch/cpu/libtorch-win-shared-with-deps-2.5.1%2Bcpu.zip" -OutFile libtorch.zip;
        Expand-Archive -Path libtorch.zip -DestinationPath C:\;
        Remove-Item -Path "libtorch.zip" -Force

    - name: Install Clang 17 - Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x ./llvm.sh
        sudo ./llvm.sh 17

    - name: Configure CMake - Linux / GCC
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: ${{ matrix.os == 'ubuntu-latest' && matrix.c_compiler == 'gcc' }}
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DIGANET_BUILD_UNITTESTS=ON
        -DTorch_DIR=$HOME/libtorch/share/cmake/Torch
        -S ${{ github.workspace }}

    - name: Configure CMake - Linux / Clang
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: ${{ matrix.os == 'ubuntu-latest' && matrix.c_compiler == 'clang' }}
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=clang++-17
        -DCMAKE_C_COMPILER=clang-17
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DIGANET_BUILD_UNITTESTS=ON
        -DTorch_DIR=$HOME/libtorch/share/cmake/Torch
        -DIGANET_WITH_OPENMP=OFF
        -S ${{ github.workspace }}

    - name: Configure CMake - MacOS / Clang
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: ${{ matrix.os == 'macos-latest' && matrix.c_compiler == 'clang' }}
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DIGANET_BUILD_UNITTESTS=ON
        -DTorch_DIR=$HOME/libtorch/share/cmake/Torch
        -DIGANET_WITH_OPENMP=OFF
        -S ${{ github.workspace }}

    - name: Configure CMake - Windows / Cl
      if: matrix.os == 'windows-latest'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DIGANET_BUILD_UNITTESTS=OFF
        -DTorch_DIR=C:\libtorch\share\cmake\Torch
        -DIGANET_WITH_OPENMP=OFF
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
